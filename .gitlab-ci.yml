include:
 - 'https://source.puri.sm/Librem5/librem5-ci/raw/master/librem5-pipeline-definitions.yml'

stages:
 - build
 - test+docs
 - package
 - deploy

variables:
  DEBIAN_IMAGE: $CI_REGISTRY/world/phosh/phosh/debian:v0.0.20210803
  DEBIAN_CROSS_IMAGE: $CI_REGISTRY/world/phosh/phosh/debian-cross:v0.0.20210803
  XVFB_RUN: xvfb-run -a -s -noreset
  COMMON_BUILD_OPTS: -Db_coverage=true --werror
  ALPINE_EDGE_DEPS: alpine-sdk callaudiod-dev elogind-dev feedbackd-dev gcr-dev git glib-dev gnome-desktop-dev
                    gtk+3.0-dev libgudev-dev libhandy1-dev gcr-dev libsecret-dev gcovr linux-pam-dev
                    meson musl-dev networkmanager-dev ninja polkit-elogind-dev pulseaudio-dev
                    upower-dev wayland-dev wayland-protocols ttf-dejavu

.bullseye_vars: &bullseye_vars
  variables:
    DIST: bullseye
    BUILD_OPTS: -Dphoc_tests=enabled ${COMMON_BUILD_OPTS}

.build_step: &build_step
  script:
    - git submodule update --recursive
    - 'echo "Build opts: ${BUILD_OPTS}"'
    - meson ${BUILD_OPTS} . _build
    - ninja -C _build

.test_step: &test_step
  script:
    - export LC_ALL=C.UTF-8
    - ${XVFB_RUN} meson test -C _build
    - ninja -C _build coverage

build:native-debian-bullseye:
  stage: build
  image: ${DEBIAN_IMAGE}
  <<: *bullseye_vars
  <<: *build_step
  artifacts:
    paths:
      - _build
  except:
    variables:
      - $PKG_ONLY == "1"

# Build for 32bit architecture to catch common errors
build:cross-debian-bullseye:i386:
  stage: build
  image: "${DEBIAN_CROSS_IMAGE}"
  allow_failure: true
  script:
    - git submodule update --recursive
    - 'echo "Build opts: ${COMMON_BUILD_OPTS}"'
    - /usr/share/meson/debcrossgen --arch i386 -o cross-i386.txt
    - meson ${COMMON_BUILD_OPTS} . _build --cross-file cross-i386.txt
    - ninja -C _build
  artifacts:
    paths:
      - _build
  except:
    variables:
      - $PKG_ONLY == "1"

unit-test:native-debian-bullseye:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  needs:
    - build:native-debian-bullseye
  <<: *bullseye_vars
  <<: *test_step
  coverage: '/^lines:\s+([\d.]+\%)\s+/'
  artifacts:
    when: always
    paths:
      - _build
    reports:
      junit: _build/meson-logs/testlog.junit.xml
  except:
    variables:
      - $PKG_ONLY == "1"

build-gtkdoc:
  stage: test+docs
  image: ${DEBIAN_IMAGE}
  variables:
    DIST: bullseye
    BUILD_OPTS: -Dgtk_doc=true ${COMMON_BUILD_OPTS}
  script:
    - git clean -dfx
    - 'echo "Build opts: ${BUILD_OPTS}"'
    - meson ${BUILD_OPTS} . _build
    - ninja -C _build
    - tools/doc-check
    - mv _build/docs/html/ _reference/
  artifacts:
    paths:
      - _reference
  except:
    variables:
      - $PKG_ONLY == "1"

check-po:
  stage: test+docs
  needs:
    - build:native-debian-bullseye
  image: ${DEBIAN_IMAGE}
  before_script:
    - eatmydata apt-get -y -f install
    - eatmydata apt-get -y update
    - eatmydata apt-get -y install intltool gettext
  <<: *bullseye_vars
  script:
    - tools/check-po
  except:
    variables:
      - $PKG_ONLY == "1"

check-license-headers:
  stage: test+docs
  needs:
    - build:native-debian-bullseye
  image: ${DEBIAN_IMAGE}
  <<: *bullseye_vars
  script:
    # Checks .c and .h files begin with a license header as
    # defined in HACKING.md
    - ./tools/check-license-headers.py
  except:
    variables:
      - $PKG_ONLY == "1"

build:native-alpinelinux-edge:
  stage: build
  image: alpine:edge
  allow_failure: true
  before_script:
    - echo "https://alpine.global.ssl.fastly.net/alpine/edge/testing" >> /etc/apk/repositories
    - apk add $ALPINE_EDGE_DEPS
  artifacts:
    paths:
      - _build
  script:
    - git submodule update --recursive
    - meson --werror . _build
    - ninja -C _build
  except:
    variables:
      - $PKG_ONLY == "1"

unit-test:native-alpinelinux-edge:
  stage: test+docs
  image: alpine:edge
  allow_failure: true
  needs:
    - build:native-alpinelinux-edge
  before_script:
    - echo "https://alpine.global.ssl.fastly.net/alpine/edge/testing" >> /etc/apk/repositories
    - apk add xvfb-run $ALPINE_EDGE_DEPS
  script:
    - export LC_ALL=C.UTF-8
    - ${XVFB_RUN} meson test -C _build --no-suite manual
  artifacts:
    when: always
    paths:
      - _build
    reports:
      junit: _build/meson-logs/testlog.junit.xml
  except:
    variables:
      - $PKG_ONLY == "1"

package:deb-pureos-byzantium:arm64:
  variables:
    L5_DOCKER_IMAGE: pureos/byzantium
    DEB_BUILD_PROFILES: nodoc
  extends: .l5-build-debian-package
  tags:
    - aarch64

pages:
  stage: deploy
  needs:
    - build-gtkdoc
  script:
    - mv _reference/ public/
  artifacts:
    paths:
      - public
  only:
    - main

